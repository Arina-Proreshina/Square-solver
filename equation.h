/**
 * @file equation.h
 * @brief Заголовочный файл для решения линейных и квадратных уравнений.
 *
 * Этот файл содержит объявления функций и структур, используемых для
 * решения линейных уравнений вида `bx + c = 0` и квадратных уравнений
 * вида `ax^2 + bx + c = 0`. Также предоставляются функции для
 * печати результатов решения уравнений.
 *
 * Основные функции:
 * - `is_zero(double value)` - Проверяет, близко ли значение к нулю в пределах EPSILON.
 * - `solve_linear_equation(SquareEquationCoefficient coeffts)` - Решает линейное уравнение.
 * - `solve_square_equation(SquareEquationCoefficient coeffts)` - Решает квадратное уравнение.
 * - `print_solution(SquareEquationResult result)` - Печатает решение уравнения.
 *
 * Основные структуры:
 * - `SquareEquationCoefficient` - Хранит коэффициенты уравнений.
 * - `SquareEquationResult` - Хранит результаты решения уравнений.
 *
 * @note Для корректного выполнения функций требуется предварительно
 * определить значение константы `EPSILON`, которая задает пороговое
 * значение для проверки равенства с нулем.
 */
#ifndef EQUATION_H
#define EQUATION_H

/**
 * @brief Константа, представляющая значение \(10^{-6}\).
 *
 * Эта константа используется в программе для представления значения,
 * близкого к нулю. Она может быть полезна при сравнении чисел с плавающей
 * запятой для учета погрешности вычислений и определения, когда число
 * считается практически равным нулю.
 *
 * @note Значение константы установлено как 1e-6, что эквивалентно \(10^{-6}\).
 * Оно может использоваться для проверки чисел на близость к нулю, чтобы избежать
 * проблем, связанных с точностью вычислений с плавающей запятой.
 */
const double EPSILON = 1e-6;

/**
 * @enum RootNumber
 * @brief Перечисление для представления количества корней квадратного уравнения.
 *
 * Это перечисление используется для обозначения количества вещественных корней
 * квадратного уравнения. Оно определяет возможные значения количества корней
 * уравнения в зависимости от дискриминанта и коэффициентов уравнения.
 *
 * @var RootNumber::NoRoots
 * Значение 0: Уравнение не имеет вещественных корней.
 *
 * @var RootNumber::OneRoot
 * Значение 1: Уравнение имеет один вещественный корень.
 *
 * @var RootNumber::TwoRoots
 * Значение 2: Уравнение имеет два вещественных корня.
 *
 * @var RootNumber::InfRoots
 * Значение 3: Уравнение имеет бесконечно много корней (применимо для случая, когда a = 0 и b = 0).
 */
enum RootNumber {
    NoRoots,  /**< Уравнение не имеет вещественных корней. */
    OneRoot,  /**< Уравнение имеет один вещественный корень. */
    TwoRoots, /**< Уравнение имеет два вещественных корня. */
    InfRoots  /**< Уравнение имеет бесконечно много корней. */
};

/**
 * @struct SquareEquationCoefficient
 * @brief Структура для хранения коэффициентов квадратного уравнения.
 *
 * Эта структура содержит коэффициенты уравнения ax^2 + bx + c = 0.
 */
typedef struct {
    double a; /**< Коэффициент a */
    double b; /**< Коэффициент b */
    double c; /**< Коэффициент c */
} SquareEquationCoefficient;

/**
 * @struct SquareEquationResult
 * @brief Структура для хранения результатов решения квадратного уравнения.
 *
 * Эта структура содержит результаты решения квадратного уравнения,
 * а также тип результата, который указывает на количество корней.
 */
typedef struct {
    double x1;       /**< Первый корень уравнения */
    double x2;       /**< Второй корень уравнения */
    RootNumber result_type; /**< Тип результата: 0 - нет вещественных корней, 1 - один корень, 2 - два корня, 3 - бесконечно много корней*/
} SquareEquationResult;

/**solve_linear_equation
 * @brief Проверяет, близко ли значение к нулю в пределах EPSILON.
 *
 * @param value Значение, которое нужно проверить.
 * @return true Если значение близко к нулю в пределах EPSILON.
 * @return false Если значение не близко к нулю.
 */
bool is_zero(double value);

/**
 * @brief Решает линейное уравнение вида bx + c = 0.
 *
 * Эта функция вычисляет корень линейного уравнения на основе коэффициентов
 * b и c. Она обрабатывает специальные случаи, когда коэффициенты b и/или c равны нулю.
 *
 * @param[in] coeffts Структура, содержащая коэффициенты линейного уравнения.
 *                    - `coeffts.b` Коэффициент при x.
 *                    - `coeffts.c` Свободный член.
 * @return SquareEquationResult Структура, содержащая результат решения уравнения.
 *                              - `result.x1` Значение корня уравнения (действительное число).
 *                              - `result.result_type` Тип результата:
 *                                - `InfRoots`  Если уравнение имеет бесконечно много решений (когда b = 0 и c = 0).
 *                                - `NoRoots`   Если уравнение не имеет решений (когда b = 0 и c != 0).
 *                                - `OneRoot`   Если уравнение имеет один корень (когда b != 0).
 */
SquareEquationResult solve_linear_equation(SquareEquationCoefficient coeffts);

/**
 * @brief Решает квадратное уравнение вида ax^2 + bx + c = 0.
 *
 * Эта функция вычисляет корни квадратного уравнения на основе коэффициентов
 * a, b и c. Она также учитывает случай, когда коэффициент a равен нулю, и
 * переходит к решению линейного уравнения вида bx + c = 0.
 *
 * @param[in] coeffts Структура, содержащая коэффициенты квадратного уравнения.
 *                    - `coeffts.a` Коэффициент при x^2.
 *                    - `coeffts.b` Коэффициент при x.
 *                    - `coeffts.c` Свободный член.
 * @return SquareEquationResult Структура, содержащая результат решения уравнения.
 *                              - `result.x1` Первый корень уравнения (действительное число).
 *                              - `result.x2` Второй корень уравнения (действительное число, если существует).
 *                              - `result.result_type` Тип результата:
 *                                - `InfRoots`  Если уравнение имеет бесконечно много решений (когда a = 0, b = 0 и c = 0).
 *                                - `NoRoots`   Если уравнение не имеет решений (когда a = 0, b = 0 и c != 0).
 *                                - `OneRoot`   Если уравнение имеет один корень (когда a = 0, b != 0 или дискриминант равен нулю).
 *                                - `TwoRoots`  Если уравнение имеет два корня (когда дискриминант больше нуля).
 */
SquareEquationResult solve_square_equation(SquareEquationCoefficient coeffts);

/**
 * @brief Печатает решение квадратного уравнения.
 *
 * Эта функция принимает структуру SquareEquationResult и печатает соответствующее
 * сообщение в зависимости от типа результата.
 *
 * @param[in] result Указатель на структуру SquareEquationResult, содержащую результаты.
 */
void print_solution(SquareEquationResult result);


#endif // EQUATION_H
